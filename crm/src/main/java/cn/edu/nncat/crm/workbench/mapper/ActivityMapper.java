package cn.edu.nncat.crm.workbench.mapper;

import cn.edu.nncat.crm.workbench.domain.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Sep 15 12:08:22 CST 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Sep 15 12:08:22 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Sep 15 12:08:22 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Sep 15 12:08:22 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Sep 15 12:08:22 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /*
    * 根据条件分页查询市场活动的列表
    * @param map
    * */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /*
    * 根据条件查询市场活动的总条数
    * @param map
    * @return
    * */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /*
    *根据id数组批量删除市场活动
    * @param ids
    * */
    int deleteActivityByIds(String[] ids);

    Activity selectActivityById(String id);

    /*
    * 根据id修改市场活动
    *@param id
    *  */
    int updateActivityById(Activity activity);

    /*
    * 查询所有的市场活动
    * */
    List<Activity> selectAllActivitys();

    /**
     * 批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动的明细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id和市场活动name查询市场活动列表
     * @param name
     * @param clueId
     * @return
     */
    List<Activity> selectActivityListByName(@Param("name") String name,@Param("clueId") String clueId);

    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据市场活动名称模糊查询市场活动，并且是和clueId关联过的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);

    /**
     * 通多name查找市场活动
     * @param name
     * @return
     */
    List<Activity> selectActivityListByNameForAll(String name);

}